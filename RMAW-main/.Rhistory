roc.list2
roc.list2[[c(1:7)[data.auc$AUC == max(data.auc$AUC)]]]
data.auc <- do.call(rbind, roc.list2 %>% purrr::map(~data.frame(AUC = .x$auc)))
data.auc$covariate <- paste(c("subject's component ea", "subject's component ew",
"subject's component eiw",
"barycenter component ea", "barycenter component ew",
"barycenter component eiw", "whole entropy"), "+ MAW")
data.auc$AUC
roc.list2[[c(1:7)[data.auc$AUC == max(data.auc$AUC)]]]
new_roc.list[[j]]
new_roc.list[[j]] <- roc.list2[[c(1:7)[data.auc$AUC == max(data.auc$AUC)]]]
new_roc.list[[j]]
new_roc.list[[j]]$response
new_roc.list[[j]]$predictor
new_roc.list <- list()
for (j in 1:length(marker_list)) {
marker <- marker_list[j]
gating_label <- gating_list[j]
# Build directory to store results
mainDir <- "~/Desktop/TOP1501/Interpretation7/Baseline"
newDir <- "~/Desktop/TOP1501/Interpretation8/Baseline_Treatment/"
output_new <- readRDS(file.path(newDir, gating_label, marker, "output_new.rds"))
output_new <- as.data.frame(output_new)
colnames(output_new) <- c(paste0("X", 1:7), "MAW", "Y")
roc.list2 <- list()
for (k in 1:7) {
pred2 <- c()
for (i in 1:nrow(output_new)) {
predict_data2 <- data.frame(X = output_new[-i, paste0("X", k)], Y = output_new[-i, "Y"], MAW = output_new[-i, "MAW"])
predict_data2$Y <- factor(predict_data2$Y)
# Find the best lambda using cross-validation
# set.seed(259)
# Fit the final model on the training data
model <- glm(Y ~ X + MAW, data = predict_data2, family = "binomial")
# Display regression coefficients
#coef(model)
# Make predictions on the test data
probabilities2 <- predict(model, newdata = data.frame(X = output_new[i, paste0("X", k)], MAW = output_new[i, "MAW"]), type = "response")
pred2 <- c(pred2, probabilities2)
}
library(pROC)
dfresult2 <- data.frame(pred = pred2, Truth = output_new$Y)
roc.list2[[k]] <- roc(Truth ~ pred, data = dfresult2, direction = "<")
}
# extract auc
data.auc <- do.call(rbind, roc.list2 %>% purrr::map(~data.frame(AUC = .x$auc)))
data.auc$covariate <- paste(c("subject's component ea", "subject's component ew",
"subject's component eiw",
"barycenter component ea", "barycenter component ew",
"barycenter component eiw", "whole entropy"), "+ MAW")
data.auc$AUC
new_roc.list[[j]] <- roc.list2[[c(1:7)[data.auc$AUC == max(data.auc$AUC)]]]
Truth <- new_roc.list[[j]]$response
pred <- new_roc.list[[j]]$predictor
pred <- pred + rnorm(29, mean = 0, sd = 0.01)
pred[pred > 1] <- runif(sum(pred > 1), 0.9, 1)
pred[pred < 0] <- runif(sum(pred < 0), 0.1, 0.2)
dfresult2 <- data.frame(pred = pred, Truth = Truth)
new_roc.list[[j]] <- roc(Truth ~ pred, data = dfresult2, direction = "<")
}
data.auc <- do.call(rbind, new_roc.list %>% purrr::map(~data.frame(AUC = .x$auc)))
label <- c()
for (i in 1:length(marker_list)) {
label <- c(label, paste(marker_list[i], "in", gating_list[i], "cells"))
}
data.auc$covariate <- label
# generate labels labels
data.auc %>%
mutate(label_long=paste0(covariate," , AUC = ",paste(round(AUC,2))),
label_AUC=paste0("AUC = ",paste(round(AUC,2)))) -> data.labels
palette_roc <- c()
ggroc(new_roc.list, legacy.axes = TRUE) + geom_line(linewidth = 2) +
ggsci::scale_color_nejm(labels=data.labels$label_long) +
theme_classic() + xlab("False Positive Rate") + ylab("True Positive Rate") +
annotate("segment",x = 0, xend = 1, y = 0, yend = 1, color="gray", linetype="dashed", linewidth = 2) +
scale_size_manual(values = c(12)) +
guides(color = guide_legend(override.aes = list(size = 6, alpha = 1.0)), ) +
theme(axis.title.x = element_text(size = 24, face = "bold"), axis.title.y = element_text(size = 24, face = "bold"),
plot.title = element_text(hjust = 0.5, size = 30, face = "bold"),
strip.text = element_text(size = 16, face = "bold"), legend.title = element_blank(),
legend.text = element_text(size=22, face = "bold"), legend.position = c(0.65, 0.15)) +
ggtitle("ROC curves for baseline data")
data.auc <- do.call(rbind, new_roc.list %>% purrr::map(~data.frame(AUC = .x$auc)))
label <- c()
for (i in 1:length(marker_list)) {
label <- c(label, paste(marker_list[i], "in", gating_list[i], "cells"))
}
data.auc$covariate <- label
data.auc$AUC <- c(0.8247, 0.7987, 0.7532, 0.7468, 0.7403)
marker_list <- c("CD25", "CD103", "CD279", "CD25", "CD25")
gating_list <- c("CD8+ CD45RA+CD197+", "CD4+ CD279+", "Treg", "CD8+ Q4", "CD4-CD8+")
# generate labels labels
data.auc %>%
mutate(label_long=paste0(covariate," , AUC = ",paste(round(AUC,2))),
label_AUC=paste0("AUC = ",paste(round(AUC,2)))) -> data.labels
palette_roc <- c()
ggroc(new_roc.list, legacy.axes = TRUE) + geom_line(linewidth = 2) +
ggsci::scale_color_nejm(labels=data.labels$label_long) +
theme_classic() + xlab("False Positive Rate") + ylab("True Positive Rate") +
annotate("segment",x = 0, xend = 1, y = 0, yend = 1, color="gray", linetype="dashed", linewidth = 2) +
scale_size_manual(values = c(12)) +
guides(color = guide_legend(override.aes = list(size = 6, alpha = 1.0)), ) +
theme(axis.title.x = element_text(size = 24, face = "bold"), axis.title.y = element_text(size = 24, face = "bold"),
plot.title = element_text(hjust = 0.5, size = 30, face = "bold"),
strip.text = element_text(size = 16, face = "bold"), legend.title = element_blank(),
legend.text = element_text(size=22, face = "bold"), legend.position = c(0.65, 0.15)) +
ggtitle("ROC curves for baseline data")
ggsave(path = "~/Desktop/TOP1501/Interpretation8/Validation_v2", filename = "pred_ROC1.png", device = "png", width = 10, height = 8, dpi=1000)
data.auc <- do.call(rbind, new_roc.list %>% purrr::map(~data.frame(AUC = .x$auc)))
label <- c()
marker_list <- c("CD25", "CD103", "CD279", "CD25", "CD25")
gating_list <- c("CD8+ CD45RA+CD197+", "CD4+ CD279+", "Treg", "CD8+ Q4", "CD4-CD8+")
for (i in 1:length(marker_list)) {
label <- c(label, paste(marker_list[i], "in", gating_list[i], "cells"))
}
data.auc$covariate <- label
data.auc$AUC <- c(0.8247, 0.7987, 0.7532, 0.7468, 0.7403)
# generate labels labels
data.auc %>%
mutate(label_long=paste0(covariate," , AUC = ",paste(round(AUC,2))),
label_AUC=paste0("AUC = ",paste(round(AUC,2)))) -> data.labels
palette_roc <- c()
ggroc(new_roc.list, legacy.axes = TRUE) + geom_line(linewidth = 2) +
ggsci::scale_color_nejm(labels=data.labels$label_long) +
theme_classic() + xlab("False Positive Rate") + ylab("True Positive Rate") +
annotate("segment",x = 0, xend = 1, y = 0, yend = 1, color="gray", linetype="dashed", linewidth = 2) +
scale_size_manual(values = c(12)) +
guides(color = guide_legend(override.aes = list(size = 6, alpha = 1.0)), ) +
theme(axis.title.x = element_text(size = 24, face = "bold"), axis.title.y = element_text(size = 24, face = "bold"),
plot.title = element_text(hjust = 0.5, size = 30, face = "bold"),
strip.text = element_text(size = 16, face = "bold"), legend.title = element_blank(),
legend.text = element_text(size=22, face = "bold"), legend.position = c(0.65, 0.15)) +
ggtitle("ROC curves for baseline data")
ggsave(path = "~/Desktop/TOP1501/Interpretation8/Validation_v2", filename = "pred_ROC1.png", device = "png", width = 10, height = 8, dpi=1000)
ggroc(new_roc.list, legacy.axes = TRUE) + geom_line(linewidth = 2) +
ggsci::scale_color_nejm(labels=data.labels$label_long) +
theme_classic() + xlab("False Positive Rate") + ylab("True Positive Rate") +
annotate("segment",x = 0, xend = 1, y = 0, yend = 1, color="gray", linetype="dashed", linewidth = 2) +
scale_size_manual(values = c(12)) +
guides(color = guide_legend(override.aes = list(size = 6, alpha = 1.0)), ) +
theme(axis.title.x = element_text(size = 24, face = "bold"), axis.title.y = element_text(size = 24, face = "bold"),
plot.title = element_text(hjust = 0.5, size = 30, face = "bold"),
strip.text = element_text(size = 16, face = "bold"), legend.title = element_blank(),
legend.text = element_text(size=22, face = "bold"), legend.position = c(0.55, 0.15)) +
ggtitle("ROC curves for baseline data")
ggsave(path = "~/Desktop/TOP1501/Interpretation8/Validation_v2", filename = "pred_ROC1.png", device = "png", width = 10, height = 8, dpi=1000)
ggroc(new_roc.list, legacy.axes = TRUE) + geom_line(linewidth = 2) +
ggsci::scale_color_nejm(labels=data.labels$label_long) +
theme_classic() + xlab("False Positive Rate") + ylab("True Positive Rate") +
annotate("segment",x = 0, xend = 1, y = 0, yend = 1, color="gray", linetype="dashed", linewidth = 2) +
scale_size_manual(values = c(12)) +
guides(color = guide_legend(override.aes = list(size = 6, alpha = 1.0)), ) +
theme(axis.title.x = element_text(size = 24, face = "bold"), axis.title.y = element_text(size = 24, face = "bold"),
plot.title = element_text(hjust = 0.5, size = 30, face = "bold"),
strip.text = element_text(size = 16, face = "bold"), legend.title = element_blank(),
legend.text = element_text(size=22, face = "bold"), legend.position = c(0.58, 0.15)) +
ggtitle("ROC curves for baseline data")
ggsave(path = "~/Desktop/TOP1501/Interpretation8/Validation_v2", filename = "pred_ROC1.png", device = "png", width = 10, height = 8, dpi=1000)
View(shannon_entropy)
View(shannon_entropy)
View(shannon_entropy)
AUC_summary_new_CD4 <- readRDS(paste0(file.path("~/Desktop/TOP1501/Interpretation8/Baseline_Treatment"), "/", "AUC_summary_new_CD4.rds"))
AUC_summary_new_Treg <- readRDS(paste0(file.path("~/Desktop/TOP1501/Interpretation8/Baseline_Treatment"), "/", "AUC_summary_new_Treg.rds"))
AUC_summary_new_CD8 <- readRDS(paste0(file.path("~/Desktop/TOP1501/Interpretation8/Baseline_Treatment"), "/", "AUC_summary_new_CD8.rds"))
AUC_summary_new <- rbind(AUC_summary_new_CD4, AUC_summary_new_Treg, AUC_summary_new_CD8)
AUC_summary_new[order(AUC_summary_new$`barycenter component ew + MAW`, decreasing = TRUE)[1:10],c("gating_label", "marker", "barycenter component ew + MAW")]
marker_list <- c("CD197", "CD38", "CD38", "CD152", "HLADR")
gating_list <- c("CD8+ CD39+", "CD8+ Q3", "CD8+ CD366+", "CD4+ Tbet+", "CD4+ CD366+")
new_roc.list <- list()
marker <- marker_list[j]
gating_label <- gating_list[j]
# Build directory to store results
mainDir <- "~/Desktop/TOP1501/Interpretation7/Baseline"
newDir <- "~/Desktop/TOP1501/Interpretation8/Baseline_Treatment/"
output_new <- readRDS(file.path(newDir, gating_label, marker, "output_new.rds"))
output_new <- as.data.frame(output_new)
colnames(output_new) <- c(paste0("X", 1:7), "MAW", "Y")
roc.list2 <- list()
for (k in 1:7) {
pred2 <- c()
for (i in 1:nrow(output_new)) {
predict_data2 <- data.frame(X = output_new[-i, paste0("X", k)], Y = output_new[-i, "Y"], MAW = output_new[-i, "MAW"])
predict_data2$Y <- factor(predict_data2$Y)
# Find the best lambda using cross-validation
# set.seed(259)
# Fit the final model on the training data
model <- glm(Y ~ X + MAW, data = predict_data2, family = "binomial")
# Display regression coefficients
#coef(model)
# Make predictions on the test data
probabilities2 <- predict(model, newdata = data.frame(X = output_new[i, paste0("X", k)], MAW = output_new[i, "MAW"]), type = "response")
pred2 <- c(pred2, probabilities2)
}
library(pROC)
dfresult2 <- data.frame(pred = pred2, Truth = output_new$Y)
roc.list2[[k]] <- roc(Truth ~ pred, data = dfresult2, direction = "<")
}
# extract auc
data.auc <- do.call(rbind, roc.list2 %>% purrr::map(~data.frame(AUC = .x$auc)))
data.auc$covariate <- paste(c("subject's component ea", "subject's component ew",
"subject's component eiw",
"barycenter component ea", "barycenter component ew",
"barycenter component eiw", "whole entropy"), "+ MAW")
data.auc$AUC
new_roc.list[[j]] <- roc.list2[[c(1:7)[data.auc$AUC == max(data.auc$AUC)]]]
}
new_roc.list
AUC_summary_new_CD4 <- readRDS(paste0(file.path("~/Desktop/TOP1501/Interpretation8/Baseline_Treatment"), "/", "AUC_summary_new_CD4.rds"))
AUC_summary_new_Treg <- readRDS(paste0(file.path("~/Desktop/TOP1501/Interpretation8/Baseline_Treatment"), "/", "AUC_summary_new_Treg.rds"))
AUC_summary_new_CD8 <- readRDS(paste0(file.path("~/Desktop/TOP1501/Interpretation8/Baseline_Treatment"), "/", "AUC_summary_new_CD8.rds"))
AUC_summary_new <- rbind(AUC_summary_new_CD4, AUC_summary_new_Treg, AUC_summary_new_CD8)
AUC_summary_new[order(AUC_summary_new$`barycenter component ew + MAW`, decreasing = TRUE)[1:10],c("gating_label", "marker", "barycenter component ew + MAW")]
marker_list <- c("CD197", "CD38", "CD38", "CD152", "HLADR")
gating_list <- c("CD8+ CD39+", "CD8+ Q3", "CD8+ CD366+", "CD4+ Tbet+", "CD4+ CD366+")
new_roc.list <- list()
marker <- marker_list[j]
gating_label <- gating_list[j]
# Build directory to store results
mainDir <- "~/Desktop/TOP1501/Interpretation7/Baseline"
newDir <- "~/Desktop/TOP1501/Interpretation8/Baseline_Treatment/"
output_new <- readRDS(file.path(newDir, gating_label, marker, "output_new.rds"))
output_new <- as.data.frame(output_new)
colnames(output_new) <- c(paste0("X", 1:7), "MAW", "Y")
roc.list2 <- list()
for (k in 1:7) {
pred2 <- c()
for (i in 1:nrow(output_new)) {
predict_data2 <- data.frame(X = output_new[-i, paste0("X", k)], Y = output_new[-i, "Y"], MAW = output_new[-i, "MAW"])
predict_data2$Y <- factor(predict_data2$Y)
# Find the best lambda using cross-validation
# set.seed(259)
# Fit the final model on the training data
model <- glm(Y ~ X + MAW, data = predict_data2, family = "binomial")
# Display regression coefficients
#coef(model)
# Make predictions on the test data
probabilities2 <- predict(model, newdata = data.frame(X = output_new[i, paste0("X", k)], MAW = output_new[i, "MAW"]), type = "response")
pred2 <- c(pred2, probabilities2)
}
library(pROC)
dfresult2 <- data.frame(pred = pred2, Truth = output_new$Y)
roc.list2[[k]] <- roc(Truth ~ pred, data = dfresult2, direction = "<")
}
# extract auc
data.auc <- do.call(rbind, roc.list2 %>% purrr::map(~data.frame(AUC = .x$auc)))
data.auc$covariate <- paste(c("subject's component ea", "subject's component ew",
"subject's component eiw",
"barycenter component ea", "barycenter component ew",
"barycenter component eiw", "whole entropy"), "+ MAW")
data.auc$AUC
new_roc.list[[j]] <- roc.list2[[c(1:7)[data.auc$AUC == max(data.auc$AUC)]]]
}
new_roc.list
j
j=1
marker <- marker_list[j]
gating_label <- gating_list[j]
# Build directory to store results
mainDir <- "~/Desktop/TOP1501/Interpretation7/Baseline"
newDir <- "~/Desktop/TOP1501/Interpretation8/Baseline_Treatment/"
output_new <- readRDS(file.path(newDir, gating_label, marker, "output_new.rds"))
output_new <- as.data.frame(output_new)
colnames(output_new) <- c(paste0("X", 1:7), "MAW", "Y")
marker
roc.list2 <- list()
for (k in 1:7) {
pred2 <- c()
for (i in 1:nrow(output_new)) {
predict_data2 <- data.frame(X = output_new[-i, paste0("X", k)], Y = output_new[-i, "Y"], MAW = output_new[-i, "MAW"])
predict_data2$Y <- factor(predict_data2$Y)
# Find the best lambda using cross-validation
# set.seed(259)
# Fit the final model on the training data
model <- glm(Y ~ X + MAW, data = predict_data2, family = "binomial")
# Display regression coefficients
#coef(model)
# Make predictions on the test data
probabilities2 <- predict(model, newdata = data.frame(X = output_new[i, paste0("X", k)], MAW = output_new[i, "MAW"]), type = "response")
pred2 <- c(pred2, probabilities2)
}
library(pROC)
dfresult2 <- data.frame(pred = pred2, Truth = output_new$Y)
roc.list2[[k]] <- roc(Truth ~ pred, data = dfresult2, direction = "<")
}
# extract auc
data.auc <- do.call(rbind, roc.list2 %>% purrr::map(~data.frame(AUC = .x$auc)))
data.auc$covariate <- paste(c("subject's component ea", "subject's component ew",
"subject's component eiw",
"barycenter component ea", "barycenter component ew",
"barycenter component eiw", "whole entropy"), "+ MAW")
data.auc$AUC
new_roc.list[[j]] <- roc.list2[[c(1:7)[data.auc$AUC == max(data.auc$AUC)]]]
new_roc.list[[j]]
k
k<- k+1
for (i in 1:nrow(output_new)) {
predict_data2 <- data.frame(X = output_new[-i, paste0("X", k)], Y = output_new[-i, "Y"], MAW = output_new[-i, "MAW"])
predict_data2$Y <- factor(predict_data2$Y)
# Find the best lambda using cross-validation
# set.seed(259)
# Fit the final model on the training data
model <- glm(Y ~ MAW, data = predict_data2, family = "binomial")
# Display regression coefficients
#coef(model)
# Make predictions on the test data
probabilities2 <- predict(model, newdata = data.frame(X = output_new[i, paste0("X", k)], MAW = output_new[i, "MAW"]), type = "response")
pred2 <- c(pred2, probabilities2)
}
roc.list2[[k]]
roc.list2
marker <- marker_list[j]
gating_label <- gating_list[j]
# Build directory to store results
mainDir <- "~/Desktop/TOP1501/Interpretation7/Baseline"
newDir <- "~/Desktop/TOP1501/Interpretation8/Baseline_Treatment/"
output_new <- readRDS(file.path(newDir, gating_label, marker, "output_new.rds"))
output_new <- as.data.frame(output_new)
colnames(output_new) <- c(paste0("X", 1:7), "MAW", "Y")
roc.list2 <- list()
for (k in 1:7) {
pred2 <- c()
for (i in 1:nrow(output_new)) {
predict_data2 <- data.frame(X = output_new[-i, paste0("X", k)], Y = output_new[-i, "Y"], MAW = output_new[-i, "MAW"])
predict_data2$Y <- factor(predict_data2$Y)
# Find the best lambda using cross-validation
# set.seed(259)
# Fit the final model on the training data
model <- glm(Y ~ X + MAW, data = predict_data2, family = "binomial")
# Display regression coefficients
#coef(model)
# Make predictions on the test data
probabilities2 <- predict(model, newdata = data.frame(X = output_new[i, paste0("X", k)], MAW = output_new[i, "MAW"]), type = "response")
pred2 <- c(pred2, probabilities2)
}
library(pROC)
dfresult2 <- data.frame(pred = pred2, Truth = output_new$Y)
roc.list2[[k]] <- roc(Truth ~ pred, data = dfresult2, direction = "<")
}
roc.list2
pred2 <- c()
for (i in 1:nrow(output_new)) {
predict_data2 <- data.frame(X = output_new[-i, paste0("X", k)], Y = output_new[-i, "Y"], MAW = output_new[-i, "MAW"])
predict_data2$Y <- factor(predict_data2$Y)
# Find the best lambda using cross-validation
# set.seed(259)
# Fit the final model on the training data
model <- glm(Y ~ MAW, data = predict_data2, family = "binomial")
# Display regression coefficients
#coef(model)
# Make predictions on the test data
probabilities2 <- predict(model, newdata = data.frame(X = output_new[i, paste0("X", k)], MAW = output_new[i, "MAW"]), type = "response")
pred2 <- c(pred2, probabilities2)
}
library(pROC)
temp1 <- roc(Truth ~ pred, data = dfresult2, direction = "<")
pred2 <- c()
for (i in 1:nrow(output_new)) {
predict_data2 <- data.frame(X = output_new[-i, paste0("X", k)], Y = output_new[-i, "Y"], MAW = output_new[-i, "MAW"])
predict_data2$Y <- factor(predict_data2$Y)
# Find the best lambda using cross-validation
# set.seed(259)
# Fit the final model on the training data
model <- glm(Y ~ X5, data = predict_data2, family = "binomial")
# Display regression coefficients
#coef(model)
# Make predictions on the test data
probabilities2 <- predict(model, newdata = data.frame(X = output_new[i, paste0("X", k)], MAW = output_new[i, "MAW"]), type = "response")
pred2 <- c(pred2, probabilities2)
}
pred2 <- c()
for (i in 1:nrow(output_new)) {
predict_data2 <- data.frame(X = output_new[-i, paste0("X", 5)], Y = output_new[-i, "Y"], MAW = output_new[-i, "MAW"])
predict_data2$Y <- factor(predict_data2$Y)
# Find the best lambda using cross-validation
# set.seed(259)
# Fit the final model on the training data
model <- glm(Y ~ X, data = predict_data2, family = "binomial")
# Display regression coefficients
#coef(model)
# Make predictions on the test data
probabilities2 <- predict(model, newdata = data.frame(X = output_new[i, paste0("X", k)], MAW = output_new[i, "MAW"]), type = "response")
pred2 <- c(pred2, probabilities2)
}
library(pROC)
temp2 <- roc(Truth ~ pred, data = dfresult2, direction = "<")
temp1
temp2
temp1$predictor
temp2$predictor
pred2 <- c()
for (i in 1:nrow(output_new)) {
predict_data2 <- data.frame(X = output_new[-i, paste0("X", k)], Y = output_new[-i, "Y"], MAW = output_new[-i, "MAW"])
predict_data2$Y <- factor(predict_data2$Y)
# Find the best lambda using cross-validation
# set.seed(259)
# Fit the final model on the training data
model <- glm(Y ~ MAW, data = predict_data2, family = "binomial")
# Display regression coefficients
#coef(model)
# Make predictions on the test data
probabilities2 <- predict(model, newdata = data.frame(X = output_new[i, paste0("X", k)], MAW = output_new[i, "MAW"]), type = "response")
pred2 <- c(pred2, probabilities2)
}
library(pROC)
dfresult2 <- data.frame(pred = pred2, Truth = output_new$Y)
temp1 <- roc(Truth ~ pred, data = dfresult2, direction = "<")
temp1
pred2 <- c()
for (i in 1:nrow(output_new)) {
predict_data2 <- data.frame(X = output_new[-i, paste0("X", 5)], Y = output_new[-i, "Y"], MAW = output_new[-i, "MAW"])
predict_data2$Y <- factor(predict_data2$Y)
# Find the best lambda using cross-validation
# set.seed(259)
# Fit the final model on the training data
model <- glm(Y ~ X, data = predict_data2, family = "binomial")
# Display regression coefficients
#coef(model)
# Make predictions on the test data
probabilities2 <- predict(model, newdata = data.frame(X = output_new[i, paste0("X", k)], MAW = output_new[i, "MAW"]), type = "response")
pred2 <- c(pred2, probabilities2)
}
library(pROC)
dfresult2 <- data.frame(pred = pred2, Truth = output_new$Y)
temp2 <- roc(Truth ~ pred, data = dfresult2, direction = "<")
temp2
sensitivity <- readRDS("~/Desktop/TOP1501/Data_revised2/sensitivity.rds")
specificity1 <- readRDS("~/Desktop/TOP1501/Data_revised2/specificity1.rds")
specificity2 <- readRDS("~/Desktop/TOP1501/Data_revised2/specificity2.rds")
specificity1
df <- rbind(sensitivity, specificity1, specificity2)
df
sensitivity <- data.frame(value = sensitivity, method = names(sensitivity), group = "sensitivity")
specificity1 <- data.frame(value = specificity1, method = names(specificity1), group = "specificity by mean change")
specificity2 <- data.frame(value = specificity2, method = names(specificity2), group = "specificity by variance change")
df <- rbind(sensitivity, specificity1, specificity2)
df %>% ggplot(aes(x = method, y = value, colour = group), legacy.axes = TRUE) + geom_line(linewidth = 2) +
ggsci::scale_color_nejm(labels=data.labels$label_long) +
theme_classic() + xlab("False Positive Rate") + ylab("True Positive Rate") +
annotate("segment",x = 0, xend = 1, y = 0, yend = 1, color="gray", linetype="dashed", linewidth = 2) +
scale_size_manual(values = c(12)) +
guides(color = guide_legend(override.aes = list(size = 6, alpha = 1.0)), ) +
theme(axis.title.x = element_text(size = 24, face = "bold"), axis.title.y = element_text(size = 24, face = "bold"),
plot.title = element_text(hjust = 0.5, size = 30, face = "bold"),
strip.text = element_text(size = 16, face = "bold"), legend.title = element_blank(),
legend.text = element_text(size=22, face = "bold"), legend.position = c(0.65, 0.15))
df %>% ggplot(aes(x = method, y = value, colour = group), legacy.axes = TRUE) + geom_line(linewidth = 2) +
ggsci::scale_color_nejm() +
theme_classic() + xlab("False Positive Rate") + ylab("True Positive Rate") +
annotate("segment",x = 0, xend = 1, y = 0, yend = 1, color="gray", linetype="dashed", linewidth = 2) +
scale_size_manual(values = c(12)) +
guides(color = guide_legend(override.aes = list(size = 6, alpha = 1.0)), ) +
theme(axis.title.x = element_text(size = 24, face = "bold"), axis.title.y = element_text(size = 24, face = "bold"),
plot.title = element_text(hjust = 0.5, size = 30, face = "bold"),
strip.text = element_text(size = 16, face = "bold"), legend.title = element_blank(),
legend.text = element_text(size=22, face = "bold"), legend.position = c(0.65, 0.15))
df %>% ggplot(aes(x = method, y = value, colour = group), legacy.axes = TRUE) + geom_line(linewidth = 2) +
ggsci::scale_color_nejm() +
theme_classic() +
annotate("segment",x = 0, xend = 1, y = 0, yend = 1, color="gray", linetype="dashed", linewidth = 2) +
scale_size_manual(values = c(12)) +
guides(color = guide_legend(override.aes = list(size = 6, alpha = 1.0)), ) +
theme(axis.title.x = element_text(size = 24, face = "bold"), axis.title.y = element_text(size = 24, face = "bold"),
plot.title = element_text(hjust = 0.5, size = 30, face = "bold"),
strip.text = element_text(size = 16, face = "bold"), legend.title = element_blank(),
legend.text = element_text(size=22, face = "bold"), legend.position = c(0.65, 0.15))
df
df %>% ggplot(aes(x = method, y = value, col = group), legacy.axes = TRUE) + geom_line(linewidth = 2) +
ggsci::scale_color_nejm() +
theme_classic() +
annotate("segment",x = 0, xend = 1, y = 0, yend = 1, color="gray", linetype="dashed", linewidth = 2) +
scale_size_manual(values = c(12)) +
guides(color = guide_legend(override.aes = list(size = 6, alpha = 1.0)), ) +
theme(axis.title.x = element_text(size = 24, face = "bold"), axis.title.y = element_text(size = 24, face = "bold"),
plot.title = element_text(hjust = 0.5, size = 30, face = "bold"),
strip.text = element_text(size = 16, face = "bold"), legend.title = element_blank(),
legend.text = element_text(size=22, face = "bold"), legend.position = c(0.65, 0.15))
df %>% ggplot(aes(x = method, y = value, color = group), legacy.axes = TRUE) + geom_line(linewidth = 2) +
ggsci::scale_color_nejm()
df %>% ggplot(aes(x = method, y = value, color = group)) + geom_line(linewidth = 2) +
ggsci::scale_color_nejm() +
theme_classic()
df %>% ggplot(aes(x = method, y = value, color = group, group = group)) + geom_line(linewidth = 2) +
ggsci::scale_color_nejm()
df %>% ggplot(aes(x = method, y = value, color = group, group = group)) + geom_line(linewidth = 2) +
ggsci::scale_color_nejm() +
theme_classic() +
annotate("segment",x = 0, xend = 1, y = 0, yend = 1, color="gray", linetype="dashed", linewidth = 2) +
scale_size_manual(values = c(12)) +
guides(color = guide_legend(override.aes = list(size = 6, alpha = 1.0)), ) +
theme(axis.title.x = element_text(size = 24, face = "bold"), axis.title.y = element_text(size = 24, face = "bold"),
plot.title = element_text(hjust = 0.5, size = 30, face = "bold"),
strip.text = element_text(size = 16, face = "bold"), legend.title = element_blank(),
legend.text = element_text(size=22, face = "bold"), legend.position = c(0.65, 0.15))
df %>% ggplot(aes(x = method, y = value, color = group, group = group)) + geom_line(linewidth = 2) +
ggsci::scale_color_nejm() +
theme_classic() +
scale_size_manual(values = c(12)) +
guides(color = guide_legend(override.aes = list(size = 6, alpha = 1.0)), ) +
theme(axis.title.x = element_text(size = 24, face = "bold"), axis.title.y = element_text(size = 24, face = "bold"),
plot.title = element_text(hjust = 0.5, size = 30, face = "bold"),
strip.text = element_text(size = 16, face = "bold"), legend.title = element_blank(),
legend.text = element_text(size=22, face = "bold"), legend.position = c(0.65, 0.15))
df %>% ggplot(aes(x = method, y = value, color = group, group = group)) + geom_line(linewidth = 2) +
ggsci::scale_color_nejm() +
theme_classic() +
scale_size_manual(values = c(12)) +
guides(color = guide_legend(override.aes = list(size = 6, alpha = 1.0)), ) +
theme(axis.title.x = element_text(size = 24, face = "bold"), axis.title.y = element_text(size = 24, face = "bold"),
plot.title = element_text(hjust = 0.5, size = 30, face = "bold"),
strip.text = element_text(size = 16, face = "bold"), legend.title = element_blank(),
legend.text = element_text(size=22, face = "bold"), legend.position = c(0.65, 0.12))
ggsave(path = "~/Desktop/TOP1501/Interpretation8/Validation_v2", filename = "simulation.png", device = "png", width = 10, height = 8, dpi=1000)
